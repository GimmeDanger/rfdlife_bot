# _*_ coding: utf-8 _*_

from telebot import types

from utils.common_utils import my_bot


class Setting:
    def __init__(self, show_name, statuses, statuses_showing, help_text):
        self.show_name = show_name
        self.help_text = help_text

        if len(statuses) != len(statuses_showing):
            raise IndexError
        self.statuses = statuses
        self.statuses_showing = statuses_showing
        self.len = len(statuses)
        self.curr = 0

    def get(self):
        return self.statuses[self.curr]

    def set(self, status):
        self.curr = self.statuses.index(status)

    def get_showing(self):
        return self.statuses_showing[self.curr]

    def defaultify(self):
        self.curr = 0

    def next(self):
        self.curr = (self.curr + 1) % self.len


class UserSettings:
    def __init__(self, data=None):
        self.settings_info = {
            'morning_birthdays':
                Setting('–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:', ['on', 'off'], ['üîî', 'üîï'],
                        '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è —Å —É—Ç—Ä–∞.\n'
                        'üîî ‚Äî –æ–ø–æ–≤–µ—â–∞—Ç—å\n'
                        'üîï ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'),
            'alert_about_users':
                Setting('–ü–æ—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', ['on', 'when_in_office', 'off'], ['üîî', 'üîî+üñ•', 'üîï'],
                        '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –æ—Ñ–∏—Å–µ (–∫–æ–º–∞–Ω–¥–∞ /alert).\n'
                        'üîî ‚Äî –æ–ø–æ–≤–µ—â–∞—Ç—å –≤—Å–µ–≥–¥–∞\n'
                        'üîî+üñ• ‚Äî –æ–ø–æ–≤–µ—â–∞—Ç—å —Ç–æ–ª—å–∫–æ, –∫–æ–≥–¥–∞ —è –≤ –æ—Ñ–∏—Å–µ\n'
                        'üîï ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'),
            'week_work_hours':
                Setting('–†–∞–±–æ—á–∞—è –Ω–µ–¥–µ–ª—è:', [40, 32, 20], ['40 —á', '32 —á', '20 —á'],
                        '–í–∞—à–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –≤ –Ω–µ–¥–µ–ª—é.\n'
                        '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –ª–∏ –≤—ã –ø–ª–∞–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∫–æ–º–∞–Ω–¥—ã /week –∏ —Ç.–¥.)')}

        if data is None:
            self.data = {}
            self.defaultify_all()
        else:
            self.data = data
            for name, setting in self.settings_info.items():
                if self.data.get(name) is not None:
                    setting.set(self.data[name])

    def __getitem__(self, item):
        return self.data[item]

    def defaultify_all(self):
        for name, setting in self.settings_info.items():
            setting.defaultify()
            self.data[name] = setting.get()

    def show_settings_message(self, message):
        my_bot.reply_to(message, '‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–≤–∞ '
                                 '–ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=self.generate_settings_buttons())

    def generate_settings_buttons(self):
        keyboard = types.InlineKeyboardMarkup()
        for name, setting in self.settings_info.items():
            keyboard.row(types.InlineKeyboardButton(text=setting.show_name, callback_data="settings_help_" + name),
                         types.InlineKeyboardButton(text=setting.get_showing(), callback_data="settings_" + name))

        keyboard.row(types.InlineKeyboardButton(text="‚ùé –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="settings_default"))
        keyboard.row(types.InlineKeyboardButton(text="üÜó –ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_close"))
        return keyboard

    def settings_update(self, call):
        message = call.message

        cmd_name = call.data.split('_', 1)[1]
        if cmd_name == 'dummy':
            my_bot.answer_callback_query(callback_query_id=call.id)
            return
        elif cmd_name.startswith('help'):
            setting_name = cmd_name.split('_', 1)[1]
            my_bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                         text=self.settings_info[setting_name].help_text)
            return
        elif cmd_name == 'close':
            my_bot.answer_callback_query(callback_query_id=call.id)
            my_bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                                     text="üÜó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã", parse_mode="HTML")
            return
        elif cmd_name == 'default':
            self.defaultify_all()
        else:
            self.settings_info[cmd_name].next()
            self.data[cmd_name] = self.settings_info[cmd_name].get()

        my_bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="‚úÖ  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        my_bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id,
                                         reply_markup=self.generate_settings_buttons())
